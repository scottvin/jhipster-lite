package {{ packageName }}.sample.infrastructure.secondary;

import {{ packageName }}.shared.generation.domain.ExcludeFromGeneratedCodeCoverage;
import {{ packageName }}.sample.domain.BeerId;
import {{ packageName }}.sample.domain.beer.Beer;
import {{ packageName }}.sample.domain.beer.BeerSellingState;
import {{ packageName }}.shared.error.domain.Assert;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.springframework.data.cassandra.core.mapping.Column;
import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.Table;

import java.math.BigDecimal;
import java.util.UUID;

@Table("beer_catalog")
class BeerCatalogTable {

  @PrimaryKey("id")
  private UUID id;

  @Column("name")
  private String name;

  @Column("unit_price")
  private BigDecimal unitPrice;

  public static BeerCatalogTable from(Beer beer) {
    Assert.notNull("beer", beer);

    return new BeerCatalogTable()
      .id(beer.id().get())
      .name(beer.name().get())
      .unitPrice(beer.unitPrice().get());
  }

  private BeerCatalogTable id(UUID id) {
    this.id = id;

    return this;
  }

  private BeerCatalogTable name(String name) {
    this.name = name;

    return this;
  }

  private BeerCatalogTable unitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;

    return this;
  }


  public Beer toDomain() {
    return Beer.builder().id(new BeerId(id)).name(name).unitPrice(unitPrice).sellingState(BeerSellingState.SOLD).build();
  }

  @Override
  @ExcludeFromGeneratedCodeCoverage
  public int hashCode() {
    return new HashCodeBuilder().append(id).hashCode();
  }

  @Override
  @ExcludeFromGeneratedCodeCoverage
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }

    if (obj == null || getClass() != obj.getClass()) {
      return false;
    }

    BeerCatalogTable other = (BeerCatalogTable) obj;

    return new EqualsBuilder().append(id, other.id).isEquals();
  }
}
